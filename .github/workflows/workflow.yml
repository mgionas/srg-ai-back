name: Deploy SRG AI Backand

on:
  push:
    branches: [ main ]

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/${{ vars.PROJECT_NAME }}

jobs:
  build-and-deploy:
    runs-on: self-hosted

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        # This step is crucial for multi-platform builds
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push multi-platform Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ env.IMAGE_NAME }}:latest,${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Create the project directory
            mkdir -p ~/${{ vars.PROJECT_NAME }}
            
            # Login to GHCR
            echo ${{ secrets.GHCR_PAT }} | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
            
            # Pull the latest image
            docker pull ${{ env.IMAGE_NAME }}:latest
            
            #create .env file from git variables
            cat << EOF > ~/${{ vars.PROJECT_NAME }}/.env
            ${{ vars.ENV }}
            EOF
            
            # Create or update the docker-compose.yml
            cat << 'EOF' > ~/${{ vars.PROJECT_NAME }}/docker-compose.yml
            version: '3.8'
            services:
              frontend:
                image: ${{ env.IMAGE_NAME }}:latest
                container_name: ${{ vars.PROJECT_NAME }}
                restart: unless-stopped
                networks: 
                  - npm
                volumes:
                  - 'srg-ai-back:/app/data'
            
            networks:
              npm:
                external: true

            volumes:
              srg-ai-back:
                external: true
            EOF
            
            # Step 4: Stop the old container and start new
            docker compose -f ~/${{ vars.PROJECT_NAME }}/docker-compose.yml up -d --force-recreate
            
            # Step 5: Clean up
            docker image prune -f